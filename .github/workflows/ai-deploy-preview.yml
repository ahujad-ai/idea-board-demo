name: 🤖 AI-Assisted Preview Deployment

on:
  issue_comment:
    types: [created]
  workflow_dispatch:

permissions:
  contents: read
  pull-requests: write

jobs:
  ai-deploy:
    name: AI Deploy (${{ github.event.comment.id }})
    runs-on: ubuntu-latest
    if: contains(github.event.comment.body, 'deploy-preview')
    concurrency:
      group: ai-deploy-${{ github.event.comment.id }}
    env:
      GITHUB_COMMENT: ${{ github.event.comment.body }}

    steps:
      - name: 🧰 Install Dependencies
        run: |
          pip install openai

      - name: 📦 Checkout repository
        uses: actions/checkout@v4

      - name: 🧠 Generate Deployment Commands with GPT-5
        id: ai_generate
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          python3 <<'EOF'
          import os
          from openai import OpenAI
          import re

          comment = os.getenv("GITHUB_COMMENT", "/deploy-preview feature-x")
          dry_run = "dry-run" in comment.lower()

          prompt = f"""
          You are an expert DevOps AI assistant.
          The user comment is: "{comment}"

          Generate ONLY shell commands (no explanations) that safely deploy
          a Kubernetes preview environment using manifests under ./k8s.
          Use kubectl apply -f commands only.

          Output MUST be pure bash (no prose, no markdown, no colons, no interpretation).
          """

          client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))
          response = client.chat.completions.create(
              model="gpt-5",
              messages=[{"role": "user", "content": prompt}]
          )

          cmds = response.choices[0].message.content.strip()

          # Clean: remove markdown or extra text
          cmds = re.sub(r'(?i)`+|```+|interpretation.*|^#.*', '', cmds)
          cmds = re.sub(r'[^a-zA-Z0-9_\\-\\.\\$/ \\n=:~"{}]+', '', cmds)

          if dry_run:
              print("🔍 Dry Run Mode Active - Commands (not executed):\\n", cmds)
          else:
              print("🧠 Generated Commands:\\n", cmds)

          with open("commands.sh", "w") as f:
              f.write(cmds + "\\n")

          with open("dryrun.txt", "w") as f:
              if dry_run:
                  f.write("DRY RUN MODE ENABLED\\n" + cmds)
              else:
                  f.write("EXECUTION MODE\\n" + cmds)
          EOF

      - name: 🚀 Execute AI-Generated Commands
        if: "!contains(github.event.comment.body, 'dry-run')"
        run: |
          echo "Running AI-generated commands..."
          chmod +x commands.sh
          cat commands.sh
          bash commands.sh || echo "⚠️ Some commands may have failed. Please check logs."

      - name: 🧾 Capture Commands Output
        id: show_cmds
        run: |
          echo "commands<<EOF" >> $GITHUB_OUTPUT
          cat commands.sh >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: 🧾 Capture Logs Output
        id: show_logs
        run: |
          echo "logs<<EOF" >> $GITHUB_OUTPUT
          cat dryrun.txt >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: 💬 Post Deployment Result
        uses: peter-evans/create-or-update-comment@v4
        with:
          issue-number: ${{ github.event.issue.number }}
          body: |
            🤖 **AI-Assisted Deployment Result**
            **Comment:** `${{ github.event.comment.body }}`
            **Mode:** ${{ contains(github.event.comment.body, 'dry-run') && 'Dry Run (No Execution)' || 'Execution' }}

            **Generated Commands:**
            ```bash
            ${{ steps.show_cmds.outputs.commands }}
            ```

            **Action Log:**
            ```
            ${{ steps.show_logs.outputs.logs }}
            ```
