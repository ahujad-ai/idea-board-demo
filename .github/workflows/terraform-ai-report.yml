name: Terraform AI Graph & Summary (Offline Mode)

on:
  push:
    branches: [ main ]
  pull_request:

permissions:
  contents: read

jobs:
  terraform-ai-graph:
    runs-on: ubuntu-latest

    steps:
      - name: 🧩 Checkout Repository
        uses: actions/checkout@v4

      - name: ⚙️ Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.7

      - name: 🧰 Install Dependencies
        run: |
          sudo apt-get update && sudo apt-get install -y graphviz
          pip install openai fpdf matplotlib pandas

      - name: 🧱 Terraform Offline Init & Plan
        working-directory: ./terraform/gcp
        run: |
          echo '{}' > $HOME/fake_gcp_creds.json
          export GOOGLE_APPLICATION_CREDENTIALS=$HOME/fake_gcp_creds.json
          terraform init -backend=false -input=false
          terraform validate
          terraform plan -no-color -refresh=false -lock=false \
            -var="project_id=dummy" -var="db_password=dummy" \
            -out=tfplan || true
          terraform show -json tfplan > tfplan.json
          terraform show -no-color tfplan > tfplan.txt
          terraform graph | dot -Tpng > terraform-graph.png

      - name: 🤖 Generate AI Terraform Report
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          python3 <<'EOF'
          import os, json, pandas as pd
          from openai import OpenAI
          from fpdf import FPDF

          client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

          # --- Load Terraform JSON plan ---
          with open("terraform/gcp/tfplan.json") as f:
              plan_data = json.load(f)

          # --- Recursively extract resources ---
          def extract_resources(module):
              resources = []
              if "resources" in module:
                  for res in module["resources"]:
                      resources.append({
                          "Type": res.get("type", "unknown"),
                          "Name": res.get("name", "unknown"),
                          "Provider": res.get("provider_name", "unknown"),
                      })
              for child in module.get("child_modules", []):
                  resources.extend(extract_resources(child))
              return resources

          root_module = plan_data.get("planned_values", {}).get("root_module", {})
          resources = extract_resources(root_module)

          # --- Create summary table ---
          if resources:
              df = pd.DataFrame(resources)
              summary_table = df.groupby(["Type", "Provider"], dropna=False)\
                                .size().reset_index(name="Count")\
                                .to_string(index=False)
          else:
              summary_table = "No resources detected (offline or empty plan)."

          # --- Prepare AI summary ---
          plan_text = open("terraform/gcp/tfplan.txt").read()[:12000]
          prompt = f"""
          Analyze this Terraform plan and summarize:
          1. Key resource types and their purpose
          2. Dependencies and architecture overview
          3. Likely cost drivers (compute, storage, networking)
          4. Security considerations (public exposure, IAM)
          5. Deployment complexity rating (Low/Medium/High)
          -----
          {plan_text}
          """

          print("🧠 Sending summary request to OpenAI...")
          response = client.chat.completions.create(
              model="gpt-4o-mini",
              messages=[{"role": "user", "content": prompt}]
          )

          ai_summary = response.choices[0].message.content.strip()

          # --- Generate PDF ---
          pdf = FPDF()
          pdf.add_page()
          pdf.set_font("Arial", "B", 16)
          pdf.cell(200, 10, "Terraform AI Infrastructure Report", ln=True, align="C")

          pdf.set_font("Arial", "B", 12)
          pdf.cell(200, 10, "Resource Summary Table", ln=True)
          pdf.set_font("Courier", "", 10)
          pdf.multi_cell(0, 6, summary_table)

          pdf.set_font("Arial", "B", 12)
          pdf.cell(200, 10, "AI-Generated Summary", ln=True)
          pdf.set_font("Arial", "", 11)
          pdf.multi_cell(0, 8, ai_summary.encode("latin-1", "replace").decode("latin-1"))

          pdf.output("terraform-ai-report.pdf")

          # --- Markdown output for PR comments ---
          with open("terraform-ai-summary.md", "w") as f:
              f.write("# 🧩 Terraform AI Summary Report\n\n")
              f.write("## 📊 Resource Table\n```\n" + summary_table + "\n```\n\n")
              f.write("## 🤖 AI-Generated Analysis\n\n" + ai_summary)

          print("✅ Terraform AI analysis completed successfully.")
          EOF

      - name: 📦 Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: terraform-ai-report
          path: |
            terraform/gcp/terraform-graph.png
            terraform/gcp/terraform-ai-summary.md
            terraform-ai-report.pdf
