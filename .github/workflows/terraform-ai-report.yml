name: Terraform AI Graph & Summary

on:
  push:
    branches: [ main ]
  pull_request:

permissions:
  contents: read

jobs:
  terraform-ai-graph:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set Up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.7

      - name: Install Graphviz & Python deps
        run: |
          sudo apt-get update && sudo apt-get install -y graphviz
          pip install openai fpdf matplotlib pandas

      - name: Terraform Offline Init & Plan
        working-directory: ./terraform/gcp
        run: |
          echo '{}' > $HOME/fake_gcp_creds.json
          export GOOGLE_APPLICATION_CREDENTIALS=$HOME/fake_gcp_creds.json
          terraform init -backend=false -input=false
          terraform validate
          terraform plan -no-color -refresh=false -lock=false \
            -var="project_id=dummy" -var="db_password=dummy" \
            -out=tfplan || true
          terraform show -json tfplan > tfplan.json
          terraform show -no-color tfplan > tfplan.txt
          terraform graph | dot -Tpng > terraform-graph.png

      - name: Generate AI Terraform Summary
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          python3 <<'EOF'
          import os, json, pandas as pd
          from openai import OpenAI
          from fpdf import FPDF

          # Initialize client
          client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

          # Load Terraform plan JSON
          plan_file = "terraform/gcp/tfplan.json"
          with open(plan_file) as f:
              plan_data = json.load(f)

          # Extract resource summary table
          resources = []
          for res in plan_data.get("planned_values", {}).get("root_module", {}).get("resources", []):
              resources.append({
                  "Type": res.get("type"),
                  "Name": res.get("name"),
                  "Provider": res.get("provider_name"),
              })

          df = pd.DataFrame(resources)
          summary_table = df.groupby(["Type", "Provider"]).size().reset_index(name="Count").to_string(index=False)

          # AI prompt
          with open("terraform/gcp/tfplan.txt") as f:
              plan_text = f.read()

          prompt = f"""
          Analyze this Terraform plan and summarize:
          - Key infrastructure components (VPC, GKE, CloudSQL, etc.)
          - Resource dependencies and purpose
          - Cost drivers (compute, network, database)
          - Security or exposure risks
          - Deployment complexity rating (Low/Medium/High)
          -----
          {plan_text[:10000]}
          """

          print("ðŸ§  Asking AI for architecture summary...")
          response = client.chat.completions.create(
              model="gpt-4o-mini",
              messages=[{"role": "user", "content": prompt}]
          )

          ai_summary = response.choices[0].message.content.strip()

          # Create PDF report
          pdf = FPDF()
          pdf.add_page()
          pdf.set_font("Arial", "B", 16)
          pdf.cell(200, 10, "Terraform Infrastructure Report", ln=True, align="C")

          pdf.set_font("Arial", "B", 12)
          pdf.cell(200, 10, "Resource Summary Table", ln=True)
          pdf.set_font("Courier", "", 10)
          pdf.multi_cell(0, 6, summary_table)

          pdf.set_font("Arial", "B", 12)
          pdf.cell(200, 10, "AI-Generated Summary", ln=True)
          pdf.set_font("Arial", "", 11)
          pdf.multi_cell(0, 8, ai_summary.encode("latin-1", "replace").decode("latin-1"))

          pdf.output("terraform-ai-report.pdf")
          print("âœ… Report generated successfully.")

          # Save Markdown summary for PR comments
          with open("terraform-ai-summary.md", "w") as f:
              f.write("# ðŸ§© Terraform Summary Report\n\n")
              f.write("## ðŸ“Š Resource Table\n```\n" + summary_table + "\n```\n\n")
              f.write("## ðŸ§  AI-Generated Analysis\n\n" + ai_summary)
          EOF

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: terraform-ai-output
          path: |
            terraform/gcp/terraform-graph.png
            terraform/gcp/terraform-ai-report.pdf
            terraform/gcp/terraform-ai-summary.md
