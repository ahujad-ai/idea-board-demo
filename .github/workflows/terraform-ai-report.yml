name: Terraform AI Offline Analysis

on:
  push:
    branches: [ main ]
  pull_request:

permissions:
  contents: read

jobs:
  terraform-ai-analysis:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set Up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.7

      - name: Create Fake GCP Credentials
        run: |
          echo '{}' > /tmp/fake_gcp_creds.json
          export GOOGLE_APPLICATION_CREDENTIALS=/tmp/fake_gcp_creds.json

      - name: Initialize Terraform (Offline)
        working-directory: ./terraform/gcp
        run: |
          terraform init -backend=false -input=false
          terraform validate

      - name: Static Terraform Plan (No Cloud Calls)
        working-directory: ./terraform/gcp
        run: |
          terraform plan -no-color -refresh=false -lock=false \
            -var="project_id=dummy" -var="db_password=dummy" \
            -out=tfplan || true
          terraform show -no-color tfplan > tfplan.txt

      - name: Generate AI Terraform Report
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          python3 <<'EOF'
          import os
          from openai import OpenAI
          from fpdf import FPDF

          client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))
          plan_text = open("terraform/gcp/tfplan.txt").read()

          prompt = f"""
          Analyze this Terraform plan text and summarize:
          1. List all resource types (e.g., GKE cluster, CloudSQL, VPC)
          2. Explain relationships between resources (dependencies)
          3. Mention potential cost drivers (compute, storage)
          4. Identify risky configurations (like public IPs)
          5. Generate a readable architecture overview
          -----
          {plan_text[:12000]}
          """

          print("ðŸ§  Sending to LLM for analysis...")
          response = client.chat.completions.create(
              model="gpt-4o-mini",
              messages=[{"role": "user", "content": prompt}]
          )

          summary = response.choices[0].message.content

          pdf = FPDF()
          pdf.add_page()
          pdf.set_font("Arial", "B", 16)
          pdf.cell(200, 10, "Terraform Infrastructure Report", ln=True, align="C")
          pdf.set_font("Arial", "", 12)
          pdf.multi_cell(0, 10, summary.encode("latin-1", "replace").decode("latin-1"))
          pdf.output("terraform-ai-report.pdf")
          print("âœ… Report generated: terraform-ai-report.pdf")
          EOF

      - name: Upload AI Report Artifact
        uses: actions/upload-artifact@v4
        with:
          name: terraform-ai-report
          path: terraform/gcp/terraform-ai-report.pdf
