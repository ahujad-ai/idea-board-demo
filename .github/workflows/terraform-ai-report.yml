name: Terraform AI Static Code Analysis (No Cloud)

on:
  push:
    branches: [ main ]
  pull_request:

permissions:
  contents: read

jobs:
  terraform-ai-static:
    runs-on: ubuntu-latest

    steps:
      - name: 🧩 Checkout Repository
        uses: actions/checkout@v4

      - name: ⚙️ Setup Terraform & Dependencies
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.7

      - name: 🧰 Install Tools
        run: |
          sudo apt-get update && sudo apt-get install -y graphviz jq
          pip install openai fpdf pandas
          TF_INSPECT_VERSION="v0.0.4"
          curl -L -o terraform-config-inspect_linux_amd64.zip \
            https://releases.hashicorp.com/terraform-config-inspect/${TF_INSPECT_VERSION}/terraform-config-inspect_${TF_INSPECT_VERSION#v}_linux_amd64.zip
          unzip terraform-config-inspect_linux_amd64.zip -d /usr/local/bin/
          chmod +x /usr/local/bin/terraform-config-inspect

      - name: 🔍 Terraform Static Validation
        working-directory: ./terraform/gcp
        run: |
          terraform init -backend=false -input=false
          terraform validate
          terraform graph | dot -Tpng > terraform-graph.png
          terraform-config-inspect --json . > tfconfig.json
          echo "✅ Terraform graph and config extracted"

      - name: 🤖 Generate AI Terraform Summary
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          python3 <<'EOF'
          import os, json, pandas as pd
          from openai import OpenAI
          from fpdf import FPDF

          client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

          # Load static Terraform config JSON
          with open("terraform/gcp/tfconfig.json") as f:
              data = json.load(f)

          modules = data.get("module_calls", [])
          variables = data.get("variables", {})
          outputs = data.get("outputs", {})
          providers = data.get("provider_requirements", [])
          resources = data.get("resources", [])

          # --- Build resource summary table ---
          if resources:
              df = pd.DataFrame(resources)
              df = df.rename(columns={"type": "Type", "name": "Name"})
              summary_table = df.groupby(["Type"]).size().reset_index(name="Count").to_string(index=False)
          else:
              summary_table = "No resources defined in Terraform configuration."

          # --- Prepare AI prompt ---
          prompt = f"""
          You are analyzing a Terraform configuration statically (without any cloud interaction).

          Summarize:
          1. The main infrastructure components (VPC, Kubernetes, SQL, IAM, etc.)
          2. The relationships or dependencies between resources.
          3. The intended architecture and purpose.
          4. Security or scalability notes (e.g., private networking, node pools).
          5. Suggest improvements or optimizations.

          Configuration metadata:
          Providers: {providers}
          Variables: {list(variables.keys())}
          Outputs: {list(outputs.keys())}
          Resource Summary:
          {summary_table}
          """

          print("🧠 Sending AI analysis request...")
          response = client.chat.completions.create(
              model="gpt-4o-mini",
              messages=[{"role": "user", "content": prompt}]
          )
          ai_summary = response.choices[0].message.content.strip()

          # --- Generate PDF ---
          pdf = FPDF()
          pdf.add_page()
          pdf.set_font("Arial", "B", 16)
          pdf.cell(200, 10, "Terraform Static Infrastructure Report", ln=True, align="C")

          pdf.set_font("Arial", "B", 12)
          pdf.cell(200, 10, "Resource Summary", ln=True)
          pdf.set_font("Courier", "", 10)
          pdf.multi_cell(0, 6, summary_table)

          pdf.set_font("Arial", "B", 12)
          pdf.cell(200, 10, "AI Architecture Overview", ln=True)
          pdf.set_font("Arial", "", 11)
          pdf.multi_cell(0, 8, ai_summary.encode("latin-1", "replace").decode("latin-1"))

          pdf.output("terraform-static-report.pdf")

          # --- Markdown Summary ---
          with open("terraform-ai-summary.md", "w") as f:
              f.write("# 🧩 Terraform Static Analysis Report\n\n")
              f.write("## 📊 Resource Summary\n```\n" + summary_table + "\n```\n\n")
              f.write("## 🤖 AI Analysis\n\n" + ai_summary)

          print("✅ Terraform AI static report generated successfully.")
          EOF

      - name: 📦 Upload AI Report
        uses: actions/upload-artifact@v4
        with:
          name: terraform-static-report
          path: |
            terraform/gcp/terraform-graph.png
            terraform/gcp/terraform-ai-summary.md
            terraform-static-report.pdf
