name: Terraform AI Report

on:
  push:
    branches: [ main ]
  pull_request:

permissions:
  contents: read
  id-token: write

jobs:
  terraform-ai-report:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.8.5

      - name: Terraform Dry-Run (Offline Analysis)
        working-directory: ./terraform/gcp
        run: |
          terraform init -backend=false -input=false
          terraform validate
          terraform plan -no-color -refresh=false -lock=false \
            -var="db_password=dummy" -var="project_id=test" \
            -out=tfplan || true
          terraform show -no-color tfplan > tfplan.txt

      - name: Setup Python + dependencies
        run: |
          python3 -m venv venv
          . venv/bin/activate
          pip install openai fpdf

      - name: Generate AI Terraform Report
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          . venv/bin/activate
          python3 <<'EOF'
          from openai import OpenAI
          from fpdf import FPDF
          import os

          client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))
          plan = open("terraform/gcp/tfplan.txt").read()

          prompt = f"""
          Analyze this Terraform configuration (dry-run output) and generate a report:
          - List resource types (VPC, GKE, CloudSQL, IAM, etc.)
          - Identify dependencies between modules
          - Summarize estimated cost drivers
          - Flag risky operations (e.g., destroy, public access)
          ---
          {plan[:15000]}
          """

          response = client.chat.completions.create(
              model="gpt-5",
              messages=[{"role": "user", "content": prompt}],
              temperature=0.3,
          )
          summary = response.choices[0].message.content.strip()

          pdf = FPDF()
          pdf.add_page()
          pdf.set_font("Arial", "B", 16)
          pdf.cell(200, 10, "Terraform Static Analysis Report", ln=True, align="C")
          pdf.set_font("Arial", "", 12)
          pdf.multi_cell(0, 10, summary)
          pdf.output("terraform-static-report.pdf")
          EOF

      - name: Upload AI Report
        uses: actions/upload-artifact@v4
        with:
          name: terraform-static-report
          path: terraform-static-report.pdf
