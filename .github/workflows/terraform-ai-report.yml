name: 🤖 AI-Assisted Preview Deployment

on:
  issue_comment:
    types: [created]
  workflow_dispatch:

permissions:
  contents: read
  pull-requests: write

jobs:
  ai-deploy:
    name: AI Deploy (${{ github.event.comment.id }})
    runs-on: ubuntu-latest
    if: contains(github.event.comment.body, 'deploy-preview')
    concurrency:
      group: ai-deploy-${{ github.event.comment.id }}
    env:
      GITHUB_COMMENT: ${{ github.event.comment.body }}

    steps:
      - name: 🧰 Install Dependencies
        run: |
          pip install openai

      - name: 📦 Checkout repository
        uses: actions/checkout@v4

      - name: 🧠 Generate File from AI
        id: ai_generate
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          python3 <<'EOF'
          import os
          from openai import OpenAI

          comment = os.getenv("GITHUB_COMMENT", "/deploy-preview k8s sample")
          client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

          # Determine file type from comment
          if "k8s" in comment.lower() or "kubectl" in comment.lower():
              prompt_type = "yaml"
              filename = "ai_generated.yaml"
          elif "shell" in comment.lower() or "sh" in comment.lower():
              prompt_type = "shell"
              filename = "ai_generated.sh"
          else:
              print("⚠️ No valid keyword found in comment — skipping AI generation.")
              exit(0)

          prompt = f"""
          The user requested a {prompt_type.upper()} file.
          User comment: "{comment}"

          Generate ONLY a complete {prompt_type.upper()} file with correct syntax.
          Do not include any explanations, markdown, or comments — just raw {prompt_type.upper()} content.
          """

          response = client.chat.completions.create(
              model="gpt-5",
              messages=[{"role": "user", "content": prompt}],
              temperature=0.2,
          )

          output = response.choices[0].message.content.strip()

          with open(filename, "w") as f:
              f.write(output)

          print(f"✅ Generated {prompt_type.upper()} file saved as {filename}")
          EOF

      - name: 📎 Upload AI Generated File
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ai-generated-output
          path: |
            ai_generated.yaml
            ai_generated.sh
          if-no-files-found: ignore

      - name: 💬 Post AI Response on PR
        uses: marocchino/sticky-pull-request-comment@v2
        if: github.event_name == 'issue_comment'
        with:
          header: "🤖 AI-Assisted Generation Result"
          message: |
            ## 🤖 AI-Generated File from Comment

            **Comment:** `${{ github.event.comment.body }}`

            📄 The AI-generated file has been uploaded as a workflow artifact.

            ✅ *No execution or alteration was done on the AI output.*
