name: Terraform AI Static Code Analysis (No Cloud)

on:
  push:
    branches: [ main ]
  pull_request:

permissions:
  contents: read

jobs:
  terraform-ai-static:
    runs-on: ubuntu-latest

    steps:
      - name: 🧩 Checkout Repository
        uses: actions/checkout@v4

      - name: ⚙️ Setup Terraform & Dependencies
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.7

      - name: 🧰 Install Tools
        run: |
          sudo apt-get update && sudo apt-get install -y graphviz jq
          pip install openai fpdf pandas

      - name: 🔍 Terraform Static Validation
        working-directory: ./terraform/gcp
        run: |
          terraform init -backend=false -input=false
          terraform validate || true
          terraform graph | dot -Tpng > terraform-graph.png
          # Collect static resource info without cloud access
          echo "📦 Extracting Terraform resources statically..."
          grep -r "resource \"" . > tfresources.txt || echo "No resources found"
          grep -r "module \"" . > tfmodules.txt || echo "No modules found"
          grep -r "variable \"" . > tfvars.txt || echo "No variables found"
          grep -r "provider \"" . > tfproviders.txt || echo "No providers found"
          echo "✅ Static Terraform data extracted"

      - name: 🤖 Generate AI Terraform Summary
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          python3 <<'EOF'
          import os, pandas as pd
          from openai import OpenAI
          from fpdf import FPDF

          client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

          def readfile(f):
              return open(f).read() if os.path.exists(f) else ""

          resources = readfile("terraform/gcp/tfresources.txt")
          modules = readfile("terraform/gcp/tfmodules.txt")
          variables = readfile("terraform/gcp/tfvars.txt")
          providers = readfile("terraform/gcp/tfproviders.txt")

          # --- Summarize resources by type ---
          res_types = [line.split('"')[1] for line in resources.splitlines() if '"' in line]
          df = pd.DataFrame(res_types, columns=["Type"])
          summary_table = df.value_counts().reset_index(name="Count").to_string(index=False) if not df.empty else "No resources detected"

          # --- AI prompt ---
          prompt = f"""
          You are analyzing Terraform code statically (no cloud plan or provider init).
          Summarize this configuration in plain English.

          Focus on:
          1. Key infrastructure components (GKE, SQL, VPC, IAM, etc.)
          2. Resource dependencies and architecture overview.
          3. Security/scalability aspects.
          4. Potential cost drivers.
          5. Suggestions for improvement.

          Variables:
          {variables[:2000]}

          Providers:
          {providers[:2000]}

          Modules:
          {modules[:2000]}

          Resource Summary:
          {summary_table}
          """

          print("🧠 Sending AI analysis request...")
          response = client.chat.completions.create(
              model="gpt-4o-mini",
              messages=[{"role": "user", "content": prompt}]
          )
          ai_summary = response.choices[0].message.content.strip()

          # --- Generate PDF ---
          pdf = FPDF()
          pdf.add_page()
          pdf.set_font("Arial", "B", 16)
          pdf.cell(200, 10, "Terraform Static Infrastructure Report", ln=True, align="C")

          pdf.set_font("Arial", "B", 12)
          pdf.cell(200, 10, "Resource Summary", ln=True)
          pdf.set_font("Courier", "", 10)
          pdf.multi_cell(0, 6, summary_table)

          pdf.set_font("Arial", "B", 12)
          pdf.cell(200, 10, "AI Architecture Overview", ln=True)
          pdf.set_font("Arial", "", 11)
          pdf.multi_cell(0, 8, ai_summary.encode("latin-1", "replace").decode("latin-1"))

          pdf.output("terraform-static-report.pdf")

          # --- Markdown Summary ---
          with open("terraform-ai-summary.md", "w") as f:
              f.write("# 🧩 Terraform Static Analysis Report\n\n")
              f.write("## 📊 Resource Summary\n```\n" + summary_table + "\n```\n\n")
              f.write("## 🤖 AI Analysis\n\n" + ai_summary)

          print("✅ Terraform AI static report generated successfully.")
          EOF

      - name: 📦 Upload AI Report
        uses: actions/upload-artifact@v4
        with:
          name: terraform-static-report
          path: |
            terraform/gcp/terraform-graph.png
            terraform-ai-summary.md
            terraform-static-report.pdf
